// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	banner "github.com/kebin6/wolflamp-api/internal/handler/banner"
	base "github.com/kebin6/wolflamp-api/internal/handler/base"
	notice "github.com/kebin6/wolflamp-api/internal/handler/notice"
	order "github.com/kebin6/wolflamp-api/internal/handler/order"
	player "github.com/kebin6/wolflamp-api/internal/handler/player"
	setting "github.com/kebin6/wolflamp-api/internal/handler/setting"
	"github.com/kebin6/wolflamp-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/init/database",
				Handler: base.InitDatabaseHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/setting/update",
				Handler: setting.UpdateSettingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/setting/find",
				Handler: setting.FindSettingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/notice/update",
				Handler: notice.UpdateNoticeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/notice/find",
				Handler: notice.FindNoticeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/player/create",
				Handler: player.CreatePlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/player/update",
				Handler: player.UpdatePlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/player/delete",
				Handler: player.DeletePlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/player/find",
				Handler: player.FindPlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/player/list",
				Handler: player.ListPlayerHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/banner/create",
				Handler: banner.CreateBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banner/update",
				Handler: banner.UpdateBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banner/delete",
				Handler: banner.DeleteBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banner/find",
				Handler: banner.FindBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/banner/list",
				Handler: banner.ListBannerHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/order/create",
				Handler: order.CreateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/update",
				Handler: order.UpdateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/delete",
				Handler: order.DeleteOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/find",
				Handler: order.FindOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/list",
				Handler: order.ListOrderHandler(serverCtx),
			},
		},
	)
}
